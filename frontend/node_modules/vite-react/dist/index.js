// src/vite.ts
import {
  defineConfig as origin
} from "vite";

// src/handler/build.ts
import { extname } from "path";
var assetPatterns = [
  ["media", /\.(mp4|webm|ogg|mp3|wav|flac|aac|swf)(\?.*)?$/i],
  ["image", /\.(png|jpe?g|gif|ico|svg|webp)(\?.*)?$/i],
  ["font", /\.(woff2?|eot|ttf|otf)(\?.*)?$/i],
  ["css", /\.(s?css|less|styl)(\?.*)?$/i]
];
var handleBuild = (config) => {
  var _a, _b;
  config.build || (config.build = {});
  config.build.chunkSizeWarningLimit = 800;
  (_a = config.build).rollupOptions || (_a.rollupOptions = {});
  (_b = config.build.rollupOptions).output || (_b.output = {});
  const keys = Object.keys(config.build.rollupOptions.output);
  const overrideKeys = [
    "assetFileNames",
    "chunkFileNames",
    "entryFileNames"
  ];
  const userDefined = keys.some((key) => overrideKeys.includes(key));
  if (!userDefined) {
    config.build.rollupOptions.output = {
      ...config.build.rollupOptions.output,
      assetFileNames(assetInfo) {
        const ext = extname(assetInfo.name || "");
        let prefix = "misc";
        for (const [name, pattern] of assetPatterns) {
          if (pattern.test(ext)) {
            prefix = name;
            break;
          }
        }
        return `${prefix}/[name].[hash][extname]`;
      },
      chunkFileNames: "js/[name].[hash].js",
      entryFileNames: "js/entry-[name].[hash].js"
    };
  }
};

// src/handler/css.ts
var handleCss = (config, env) => {
  var _a, _b;
  config.css || (config.css = {});
  if (config.css.modules === false)
    return;
  (_a = config.css).modules || (_a.modules = {});
  (_b = config.css.modules).generateScopedName ?? (_b.generateScopedName = env.command === "build" ? "[hash:base64]" : "[path][name]-[ext]___[local]");
};

// src/handler/html.ts
import { createHtmlPlugin } from "vite-plugin-html";
var handleHtml = (config, env) => {
  var _a;
  if (config.html === false)
    return;
  config.html || (config.html = {});
  (_a = config.html).minify ?? (_a.minify = env.command === "build");
  config.plugins || (config.plugins = []);
  config.plugins.push(createHtmlPlugin(config.html));
};

// src/handler/legacy.ts
import legacy from "@vitejs/plugin-legacy";
var handleLegacy = (config) => {
  if (!config.legacy)
    return;
  config.plugins || (config.plugins = []);
  config.plugins.push(legacy(config.legacy === true ? void 0 : config.legacy));
};

// src/handler/mix.ts
var handleMix = (config) => {
  config.base ?? (config.base = "./");
  config.clearScreen ?? (config.clearScreen = false);
};

// src/handler/react.ts
import reactBabel from "@vitejs/plugin-react";
import reactSWC from "@vitejs/plugin-react-swc";
var handleReact = (config) => {
  config.plugins || (config.plugins = []);
  config.react || (config.react = {});
  if (config.react.swc !== false) {
    config.plugins.push(reactSWC(omit(config.react)));
  } else {
    config.plugins.push(reactBabel(omit(config.react)));
  }
};
var omit = (config) => {
  delete config.swc;
  return config;
};

// src/handler/resolve.ts
import tsconfigPaths from "vite-tsconfig-paths";
import restart from "vite-plugin-restart";
var handleResolve = (config) => {
  const { aliasFromTsconfig = true } = config.resolve || {};
  if (aliasFromTsconfig) {
    config.plugins || (config.plugins = []);
    config.plugins.push(
      tsconfigPaths(aliasFromTsconfig === true ? void 0 : aliasFromTsconfig),
      restart({ restart: ["**/tsconfig.json"], glob: true })
    );
  }
};

// src/handler/server.ts
import restart2 from "vite-plugin-restart";
import mkcert from "vite-plugin-mkcert";
import { qrcode as qrcodePlugin } from "vite-plugin-qrcode";
var handleServer = (config) => {
  var _a;
  config.server || (config.server = {});
  config.preview || (config.preview = {});
  (_a = config.server).open ?? (_a.open = true);
  config.plugins || (config.plugins = []);
  if (config.server.https === true) {
    config.server.https = void 0;
    config.plugins.push(mkcert({ source: "coding" }));
  }
  const { watchExtend } = config.server;
  if (watchExtend) {
    config.plugins.push(restart2(watchExtend));
  }
  const { qrcode = true } = config.server;
  if (qrcode) {
    config.plugins.push(qrcodePlugin(qrcode === true ? void 0 : qrcode));
  }
};

// src/vite.ts
var defineConfig = (config = {}) => {
  return origin((env) => {
    return parseConfig(typeof config === "function" ? config(env) : config, env);
  });
};
var parseConfig = (config, env) => {
  var _a, _b, _c;
  handleReact(config);
  delete config.react;
  handleLegacy(config);
  delete config.legacy;
  handleCss(config, env);
  handleBuild(config);
  handleMix(config);
  handleServer(config);
  (_a = config.server) == null ? true : delete _a.watchExtend;
  (_b = config.server) == null ? true : delete _b.qrcode;
  handleHtml(config, env);
  delete config.html;
  handleResolve(config);
  (_c = config.resolve) == null ? true : delete _c.aliasFromTsconfig;
  return config;
};
export {
  defineConfig
};
//# sourceMappingURL=index.js.map